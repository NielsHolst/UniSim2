Simulation greenhouse {
  .iterations = 5
  .steps = ./period[steps]
  Sequence spHeating {
    .by = "reset"
    .min = 5
    .max = 25
  }
  // Sequence deltaVentilation {
    // .by = "reset"
    // .min = 0.1
    // .max = 0.9
  // }
  SimulationPeriod period {
    .beginDate = 2020/1/1
    .endDate = 2020/12/31
    .timeStep = 3
    .timeUnit = "m"
  }
  Calendar calendar {
    .latitude = 55.5
    .longitude = 10.5
    .initialDateTime = ../period[beginDateTime]
    .timeStep = ../period[timeStep]
    .timeUnit = ../period[timeUnit]
  }
  vg::Outdoors outdoors {
    .skyTemperature = ./records[Tsky]
    Records records {
      .fileName = "../input/sel_dk.txt"
    }
    SkyTemperature skyTemperatureEstimate { //amended
    }
    Accumulator soilTemperature { //amended
      .initial = ./initial[value]
      .change = ./controller[controlVariable]
      Hump initial { //amended
        .x = calendar[dayOfYear]
        .x0 = 70.0
        .x1 = 365.0
        .ymin = 0.0
        .ymax = 16.0
      }
      PidController controller { //amended
        .sensedValue = ..[value]
        .desiredValue = outdoors[temperature]
        .Kprop = 5e-05
      }
    }
  }
  Box construction {
    vg::Geometry geometry {
      .orientation = 0.0
      .numSpans = 20
      .spanWidth = 4.0
      .length = 125.0
      .height = 4.0
      .roofPitch = 26.0
      .reflection = 0.1
    }
    vg::Shelter shelter {
      vg::ShelterFace roof1 {
        vg::ShelterFaceArea area {
        }
        vg::Cover cover {
          .swReflectivityTop = 0.1
          .swReflectivityBottom = 0.1
          .swTransmissivityTop = 0.89
          .swTransmissivityBottom = 0.89
          .lwReflectivityTop = 0.0
          .lwReflectivityBottom = 0.0
          .lwTransmissivityTop = 0.9
          .lwTransmissivityBottom = 0.9
          .UwindMinimum = 6.5
          .UwindSlope = 1.0
          .UwindExponent = 0.8
        }
        vg::Screens screens {
          vg::ScreenRoof layer1 {
            .swReflectivityTop = 0.53
            .swReflectivityBottom = 0.00795
            .swTransmissivityTop = 0.15
            .swTransmissivityBottom = 0.15
            .lwReflectivityTop = 0.53
            .lwReflectivityBottom = 0.00795
            .lwTransmissivityTop = 0.15
            .lwTransmissivityBottom = 0.15
            .Utop = 2.6
            .Ubottom = 2.6
            .transmissivityAir = 0.01
            .state = actuators/screens/layer1[value]
            vg::ScreensAirTransmissivity airTransmissivity {
            }
          }
          vg::ScreensAirTransmissivity airTransmissivity { //amended
          }
        }
        vg::Vent vent {
          .length = 3.0
          .width = 1.0
          .number = 200
          .transmissivity = 1.0
        }
      }
      vg::ShelterFace roof2 {
        vg::ShelterFaceArea area {
        }
        vg::Cover cover {
          .swReflectivityTop = 0.1
          .swReflectivityBottom = 0.1
          .swTransmissivityTop = 0.89
          .swTransmissivityBottom = 0.89
          .lwReflectivityTop = 0.0
          .lwReflectivityBottom = 0.0
          .lwTransmissivityTop = 0.9
          .lwTransmissivityBottom = 0.9
          .UwindMinimum = 6.5
          .UwindSlope = 1.0
          .UwindExponent = 0.8
        }
        vg::Screens screens {
          vg::ScreenRoof layer1 {
            .swReflectivityTop = 0.53
            .swReflectivityBottom = 0.00795
            .swTransmissivityTop = 0.15
            .swTransmissivityBottom = 0.15
            .lwReflectivityTop = 0.53
            .lwReflectivityBottom = 0.00795
            .lwTransmissivityTop = 0.15
            .lwTransmissivityBottom = 0.15
            .Utop = 2.6
            .Ubottom = 2.6
            .transmissivityAir = 0.01
            .state = actuators/screens/layer1[value]
            vg::ScreensAirTransmissivity airTransmissivity {
            }
          }
          vg::ScreensAirTransmissivity airTransmissivity { //amended
          }
        }
        vg::Vent vent {
          .length = 3.0
          .width = 1.0
          .number = 200
          .transmissivity = 1.0
        }
      }
      vg::ShelterFace side1 {
        vg::ShelterFaceArea area {
        }
        vg::Cover cover {
          .swReflectivityTop = 0.1
          .swReflectivityBottom = 0.1
          .swTransmissivityTop = 0.89
          .swTransmissivityBottom = 0.89
          .lwReflectivityTop = 0.0
          .lwReflectivityBottom = 0.0
          .lwTransmissivityTop = 0.9
          .lwTransmissivityBottom = 0.9
          .UwindMinimum = 6.5
          .UwindSlope = 1.0
          .UwindExponent = 0.8
        }
        vg::Screens screens {
          vg::ScreenWall layer1 {
            .swReflectivityTop = 0.53
            .swReflectivityBottom = 0.00795
            .swTransmissivityTop = 0.15
            .swTransmissivityBottom = 0.15
            .lwReflectivityTop = 0.53
            .lwReflectivityBottom = 0.00795
            .lwTransmissivityTop = 0.15
            .lwTransmissivityBottom = 0.15
            .Utop = 2.6
            .Ubottom = 2.6
            .transmissivityAir = 0.01
            .state = actuators/screens/layer1[value]
            vg::ScreensAirTransmissivity airTransmissivity {
            }
          }
          vg::ScreensAirTransmissivity airTransmissivity { //amended
          }
        }
      }
      vg::ShelterFace side2 {
        vg::ShelterFaceArea area {
        }
        vg::Cover cover {
          .swReflectivityTop = 0.1
          .swReflectivityBottom = 0.1
          .swTransmissivityTop = 0.89
          .swTransmissivityBottom = 0.89
          .lwReflectivityTop = 0.0
          .lwReflectivityBottom = 0.0
          .lwTransmissivityTop = 0.9
          .lwTransmissivityBottom = 0.9
          .UwindMinimum = 6.5
          .UwindSlope = 1.0
          .UwindExponent = 0.8
        }
        vg::Screens screens {
          vg::ScreenWall layer1 {
            .swReflectivityTop = 0.53
            .swReflectivityBottom = 0.00795
            .swTransmissivityTop = 0.15
            .swTransmissivityBottom = 0.15
            .lwReflectivityTop = 0.53
            .lwReflectivityBottom = 0.00795
            .lwTransmissivityTop = 0.15
            .lwTransmissivityBottom = 0.15
            .Utop = 2.6
            .Ubottom = 2.6
            .transmissivityAir = 0.01
            .state = actuators/screens/layer1[value]
            vg::ScreensAirTransmissivity airTransmissivity {
            }
          }
          vg::ScreensAirTransmissivity airTransmissivity { //amended
          }
        }
      }
      vg::ShelterFace end1 {
        vg::ShelterFaceArea area {
        }
        vg::Cover cover {
          .swReflectivityTop = 0.1
          .swReflectivityBottom = 0.1
          .swTransmissivityTop = 0.89
          .swTransmissivityBottom = 0.89
          .lwReflectivityTop = 0.0
          .lwReflectivityBottom = 0.0
          .lwTransmissivityTop = 0.9
          .lwTransmissivityBottom = 0.9
          .UwindMinimum = 6.5
          .UwindSlope = 1.0
          .UwindExponent = 0.8
        }
        vg::Screens screens {
          vg::ScreenWall layer1 {
            .swReflectivityTop = 0.53
            .swReflectivityBottom = 0.00795
            .swTransmissivityTop = 0.15
            .swTransmissivityBottom = 0.15
            .lwReflectivityTop = 0.53
            .lwReflectivityBottom = 0.00795
            .lwTransmissivityTop = 0.15
            .lwTransmissivityBottom = 0.15
            .Utop = 2.6
            .Ubottom = 2.6
            .transmissivityAir = 0.01
            .state = actuators/screens/layer1[value]
            vg::ScreensAirTransmissivity airTransmissivity {
            }
          }
          vg::ScreensAirTransmissivity airTransmissivity { //amended
          }
        }
      }
      vg::ShelterFace end2 {
        vg::ShelterFaceArea area {
        }
        vg::Cover cover {
          .swReflectivityTop = 0.1
          .swReflectivityBottom = 0.1
          .swTransmissivityTop = 0.89
          .swTransmissivityBottom = 0.89
          .lwReflectivityTop = 0.0
          .lwReflectivityBottom = 0.0
          .lwTransmissivityTop = 0.9
          .lwTransmissivityBottom = 0.9
          .UwindMinimum = 6.5
          .UwindSlope = 1.0
          .UwindExponent = 0.8
        }
        vg::Screens screens {
          vg::ScreenWall layer1 {
            .swReflectivityTop = 0.53
            .swReflectivityBottom = 0.00795
            .swTransmissivityTop = 0.15
            .swTransmissivityBottom = 0.15
            .lwReflectivityTop = 0.53
            .lwReflectivityBottom = 0.00795
            .lwTransmissivityTop = 0.15
            .lwTransmissivityBottom = 0.15
            .Utop = 2.6
            .Ubottom = 2.6
            .transmissivityAir = 0.01
            .state = actuators/screens/layer1[value]
            vg::ScreensAirTransmissivity airTransmissivity {
            }
          }
          vg::ScreensAirTransmissivity airTransmissivity { //amended
          }
        }
      }
    }
    Box floor {
      +reflectivity = 0.1
      +Utop = 7.5
      +Ubottom = 0.1
      +heatCapacity = 10000
    }
  }
  vg::Setpoints setpoints {
    Box elementary {
      PrioritySignal heatingTemperatureNormalRh {
        .initialSignal = spHeating[value]
        .reverseOrder = TRUE
        Box default {
          +flagIsUp = TRUE
          +signal = spHeating[value]
        }
      }
      PrioritySignal heatingTemperatureHighRhMargin {
        .reverseOrder = TRUE
        Box default {
          +flagIsUp = TRUE
          +signal = 0.0
        }
      }
      PrioritySignal heatingTemperatureLowRhMargin {
        .reverseOrder = TRUE
        Box default {
          +flagIsUp = TRUE
          +signal = 0.0
        }
      }
      PrioritySignal rhMax {
        .reverseOrder = TRUE
        Box default {
          +flagIsUp = TRUE
          +signal = 90.0
        }
      }
      PrioritySignal rhMaxBand {
        .reverseOrder = TRUE
        Box default {
          +flagIsUp = TRUE
          +signal = 10.0 //***
        }
      }
      PrioritySignal rhMin {
        .reverseOrder = TRUE
        Box default {
          +flagIsUp = TRUE
          +signal = 50.0
        }
      }
      PrioritySignal rhMinBand {
        .reverseOrder = TRUE
        Box default {
          +flagIsUp = TRUE
          +signal = 0.0
        }
      }
      PrioritySignal ventilationTemperatureMargin {
        .initialSignal = 5.0
        .reverseOrder = TRUE
        Box default {
          +flagIsUp = TRUE
          +signal = 5.0
        }
      }
      PrioritySignal crackVentilationNormalTemperature {
        .reverseOrder = TRUE
        Box default {
          +flagIsUp = TRUE
          +signal = 1.0  // ***
        }
      }
      PrioritySignal crackVentilationTemperatureMin {
        .reverseOrder = TRUE
        Box default {
          +flagIsUp = TRUE
          +signal = -5.0
        }
      }
      PrioritySignal crackVentilationTemperatureMinBand {
        .reverseOrder = TRUE
        Box default {
          +flagIsUp = TRUE
          +signal = 1.0
        }
      }
      PrioritySignal screenCrackAtHighRh {
        .reverseOrder = TRUE
        Box default {
          +flagIsUp = TRUE
          +signal = 0.001
        }
      }
      PrioritySignal screenCrackAtHighTemperature {
        .reverseOrder = TRUE
        Box default {
          +flagIsUp = TRUE
          +signal = 0.001
        }
      }
      PrioritySignal screenCrackAtHighTemperatureBand {
        .reverseOrder = TRUE
        Box default {
          +flagIsUp = TRUE
          +signal = 0.0
        }
      }
      PrioritySignal co2Capacity {
        .reverseOrder = TRUE
        Box default {
          +flagIsUp = TRUE
          +signal = 10.0
        }
      }
      PrioritySignal co2Setpoint {
        .reverseOrder = TRUE
        Box default {
          +flagIsUp = TRUE
          +signal = 900.0
        }
      }
      PrioritySignal co2VentilationThreshold {
        .reverseOrder = TRUE
        Box default {
          +flagIsUp = TRUE
          +signal = 0.1
        }
      }
      PrioritySignal co2VentilationBand {
        .reverseOrder = TRUE
        Box default {
          +flagIsUp = TRUE
          +signal = 0.2
        }
      }
      PrioritySignal chalk {
        .reverseOrder = TRUE
        Box default {
          +flagIsUp = TRUE
          +signal = 0.0
        }
      }
      Box growthLights {
        Box growthLight1 {
          PrioritySignal thresholdLow {
            .reverseOrder = TRUE
            Box default {
              +flagIsUp = TRUE
              +signal = 40.0
            }
          }
          PrioritySignal thresholdHigh {
            .reverseOrder = TRUE
            Box default {
              +flagIsUp = TRUE
              +signal = 600.0
            }
          }
          PrioritySignal setting {
            .reverseOrder = TRUE
            Box default {
              +flagIsUp = TRUE
              +signal = 0.0
            }
          }
        }
        Box growthLight2 {
          PrioritySignal thresholdLow {
            .reverseOrder = TRUE
            Box default {
              +flagIsUp = TRUE
              +signal = 40.0
            }
          }
          PrioritySignal thresholdHigh {
            .reverseOrder = TRUE
            Box default {
              +flagIsUp = TRUE
              +signal = 600.0
            }
          }
          PrioritySignal setting {
            .reverseOrder = TRUE
            Box default {
              +flagIsUp = TRUE
              +signal = 0.0
            }
          }
        }
        Box growthLight3 {
          PrioritySignal thresholdLow {
            .reverseOrder = TRUE
            Box default {
              +flagIsUp = TRUE
              +signal = 40.0
            }
          }
          PrioritySignal thresholdHigh {
            .reverseOrder = TRUE
            Box default {
              +flagIsUp = TRUE
              +signal = 600.0
            }
          }
          PrioritySignal setting {
            .reverseOrder = TRUE
            Box default {
              +flagIsUp = TRUE
              +signal = 0.0
            }
          }
        }
      }
      PrioritySignal screenEnergyThreshold1 {
        .reverseOrder = TRUE
        Box default {
          +flagIsUp = TRUE
          +signal = 10.0
        }
      }
      PrioritySignal screenEnergyThreshold2 {
        .reverseOrder = TRUE
        Box default {
          +flagIsUp = TRUE
          +signal = 5.0
        }
      }
      PrioritySignal screenEnergyThresholdBand {
        .reverseOrder = TRUE
        Box default {
          +flagIsUp = TRUE
          +signal = 5.0
        }
      }
      PrioritySignal screenShadeThreshold1 {
        .reverseOrder = TRUE
        Box default {
          +flagIsUp = TRUE
          +signal = 500.0
        }
      }
      PrioritySignal screenShadeThreshold2 {
        .reverseOrder = TRUE
        Box default {
          +flagIsUp = TRUE
          +signal = 500.0
        }
      }
      PrioritySignal screenShadeThresholdBand {
        .reverseOrder = TRUE
        Box default {
          +flagIsUp = TRUE
          +signal = 50.0
        }
      }
      PrioritySignal screenFixed1 {
        .reverseOrder = TRUE
        Box default {
          +flagIsUp = TRUE
          +signal = 0.0
        }
      }
      PrioritySignal screenFixed2 {
        .reverseOrder = TRUE
        Box default {
          +flagIsUp = TRUE
          +signal = 0.0
        }
      }
    }
    RunningAverageTimed avgRh { //amended
      .initial = indoors/humidity[rh]
      .input = indoors/humidity[rh]
      .timeWindow = 20.0
      .timeUnit = "m"
    }
    ProportionalSignal heatingTemperatureHighRhIncrement { //amended
      .input = ../avgRh[value]
      .threshold = ..[rhMax]
      .thresholdBand = ..[rhMaxBand]
      .minSignal = 0.0
      .maxSignal = ..[heatingTemperatureHighRhMargin]
      .increasingSignal = TRUE
    }
    ProportionalSignal heatingTemperatureLowRhIncrement { //amended
      .input = ../avgRh[value]
      .threshold = ..[rhMin]
      .thresholdBand = ..[rhMinBand]
      .minSignal = 0.0
      .maxSignal = ..[heatingTemperatureLowRhMargin]
      .increasingSignal = FALSE
    }
    SetpointHeating heatingTemperature { //amended
    }
    SetpointVentilation ventilationTemperature { //amended
    }
    ProportionalSignal crackVentilation { //amended
      .input = indoors/humidity[rh]
      .threshold = setpoints[rhMax]
      .thresholdBand = setpoints[rhMaxBand]
      .minSignal = 0.0
      .maxSignal = ./maxCrackDepOnTemperature[value]
      .increasingSignal = TRUE
      ProportionalSignal maxCrackDepOnTemperature { //amended
        .input = outdoors[temperature]
        .threshold = ../..[crackVentilationTemperatureMin]
        .thresholdBand = ../..[crackVentilationTemperatureMinBand]
        .minSignal = 0.0
        .maxSignal = ../..[crackVentilationNormalTemperature]
        .increasingSignal = TRUE
      }
    }
    Maximum screenCrack { //amended
      .values = ./*[value]
      ProportionalSignal atHighRh { //amended
        .input = indoors/humidity[rh]
        .threshold = ../..[rhMax]
        .thresholdBand = ../..[rhMaxBand]
        .minSignal = 0.0
        .maxSignal = ../..[screenCrackAtHighRh]
        .increasingSignal = FALSE
      }
      ProportionalSignal atHighTemperature { //amended
        .input = indoors/temperature[value]
        .threshold = ../../ventilationTemperature[value]
        .thresholdBand = ../..[screenCrackAtHighTemperatureBand]
        .minSignal = 0.0
        .maxSignal = ../..[screenCrackAtHighTemperature]
        .increasingSignal = FALSE
      }
    }
  }
  vg::Controllers controllers {
    Box co2Injection {
      +value = ./controller[controlVariable]
      PidController controller {
        .sensedValue = indoors/co2[value]
        .desiredValue = setpoints[co2Setpoint]
        .Kprop = 0.05
        .lookAhead = 10.0
      }
    }
    Box screens { //amended
      ProportionalSignal energy1 { //amended
        .input = outdoors[radiation]
        .threshold = setpoints[screenEnergyThreshold1]
        .thresholdBand = setpoints[screenEnergyThresholdBand]
        .maxSignal = 1.0
        .increasingSignal = FALSE
      }
      ProportionalSignal energy2 { //amended
        .input = outdoors[radiation]
        .threshold = setpoints[screenEnergyThreshold2]
        .thresholdBand = setpoints[screenEnergyThresholdBand]
        .maxSignal = 1.0
        .increasingSignal = FALSE
      }
      ProportionalSignal shade1 { //amended
        .input = outdoors[radiation]
        .threshold = setpoints[screenShadeThreshold1]
        .thresholdBand = setpoints[screenShadeThresholdBand]
        .maxSignal = 1.0
        .increasingSignal = TRUE
      }
      ProportionalSignal shade2 { //amended
        .input = outdoors[radiation]
        .threshold = setpoints[screenShadeThreshold2]
        .thresholdBand = setpoints[screenShadeThresholdBand]
        .maxSignal = 1.0
        .increasingSignal = TRUE
      }
      Box fixed1 { //amended
        +value = setpoints[screenFixed1]
      }
    }
    // ProportionalSignal co2Capacity { //amended
      // .input = actuators/ventilation[value]
      // .threshold = setpoints[co2VentilationThreshold]
      // .thresholdBand = setpoints[co2VentilationBand]
      // .minSignal = 0.0
      // .maxSignal = setpoints[co2Capacity]
      // .increasingSignal = FALSE
    // }
    Box growthLights { //amended
      GrowthLightController growthLight1 { //amended
        .setting = setpoints[growthLightSetting1]
        .lightThresholdLow = setpoints[growthLightThresholdLow1]
        .lightThresholdHigh = setpoints[growthLightThresholdHigh1]
      }
      GrowthLightController growthLight2 { //amended
        .setting = setpoints[growthLightSetting2]
        .lightThresholdLow = setpoints[growthLightThresholdLow2]
        .lightThresholdHigh = setpoints[growthLightThresholdHigh2]
      }
      GrowthLightController growthLight3 { //amended
        .setting = setpoints[growthLightSetting3]
        .lightThresholdLow = setpoints[growthLightThresholdLow3]
        .lightThresholdHigh = setpoints[growthLightThresholdHigh3]
      }
    }
  }
  vg::Actuators actuators {
    ActuatorHeatPipes heating {
      .temperature = 39.7858
      .propConvection = 0.84
      Box pipes {
        vg::Pipe pipe1 {
          .density = 2.0
          .diameter = 52.0
          .flowRate = 10.0
          .minTemperature = setpoints/heatingTemperature[value]
          .maxTemperature = 85.0
        }
        vg::Pipe pipe2 {
          .density = 2.0
          .diameter = 52.0
          .flowRate = 10.0
          .minTemperature = setpoints/heatingTemperature[value]
          .maxTemperature = 85.0
        }
      }
    }
    ActuatorVentilation ventilation {
    }
    Accumulator co2Injection {
      .initial = 0.0
      .change = controllers/co2Injection[value]
      .minValue = 0.0
      .maxValue = setpoints[co2Capacity]
    }
    Box screens {
      Accumulator layer1 {
        .change = ./controller[controlVariable]
        .minValue = 0.0
        .maxValue = setpoints[maxScreen]
        ScreenCombination desiredValue {
          .formula = ""
        }
        PidController controller {
          .sensedValue = ..[value]
          .desiredValue = ../desiredValue[value]
          .Kprop = 0.05
        }
      }
      Accumulator layer2 {
        .change = ./controller[controlVariable]
        .minValue = 0.0
        .maxValue = setpoints[maxScreen]
        ScreenCombination desiredValue {
          .formula = ""
        }
        PidController controller {
          .sensedValue = ..[value]
          .desiredValue = ../desiredValue[value]
          .Kprop = 0.05
        }
      }
      Accumulator layer3 {
        .change = ./controller[controlVariable]
        .minValue = 0.0
        .maxValue = setpoints[maxScreen]
        ScreenCombination desiredValue {
          .formula = ""
        }
        PidController controller {
          .sensedValue = ..[value]
          .desiredValue = ../desiredValue[value]
          .Kprop = 0.05
        }
      }
    }
    GrowthLights growthLights {
      vg::GrowthLight growthLight1 {
        .on = controllers/growthLights/growthLight1[flagIsUp]
        .intensity = 85.0
        .parPhotonCoef = 1.787
        .ageCorrectedEfficiency = 1.0
      }
      vg::GrowthLight growthLight2 {
        .on = controllers/growthLights/growthLight2[flagIsUp]
        .intensity = 50.0
        .parPhotonCoef = 1.611
        .ageCorrectedEfficiency = 1.0
      }
      vg::GrowthLight growthLight3 {
        .on = controllers/growthLights/growthLight3[flagIsUp]
        .intensity = 50.0
        .parPhotonCoef = 1.611
        .ageCorrectedEfficiency = 1.0
      }
    }
  }
  vg::EnergyBudgetOptimiser energyBudgetOptimiser {
    vg::EnergyBudget energyBudget {
      vg::HeatTransferSky sky { //amended
      }
      vg::HeatTransferCover cover { //amended
      }
      vg::HeatTransferScreen1 screen1 { //amended
      }
      vg::HeatTransferPipe pipe { //amended
      }
      vg::HeatTransferCrop crop { //amended
      }
      vg::HeatTransferFloor floor { //amended
      }
    }
    Box indoors {
      vg::IndoorsVentilation ventilation {
        .fluxLeak = ./leakage[flux]
        vg::LeakageVentilation leakage{
          .leakage = 0.1
        }
      }
      vg::IndoorsTemperature temperature {
      }
    }
  }
  WaterBudget waterBudget {
    vg::VapourFluxVentilation ventilation { //amended
    }
    vg::VapourFluxTranspiration transpiration { //amended
    }
    vg::VapourFluxCondensationCover condensationCrop { //amended
    }
    vg::VapourFluxCondensationCover condensationCover { //amended
    }
    vg::VapourFluxCondensationScreens condensationScreens { //amended
      VapourFluxCondensationScreen1 screen1 { //amended
      }
    }
  }
  Indoors indoors {
    vg::IndoorsHumidity humidity { //amended
    }
    vg::IndoorsCo2 co2 { //amended
    }
    vg::IndoorsWindSpeed windSpeed { //amended
    }
  }
  vg::Crop crop {
    .lai = 1.0
    .coverage = 0.9
    vg::StomatalResistanceRose rs { //amended
    }
    vg::BoundaryLayerResistanceStanghellini rb { //amended
    }
    vg::LeafTranspiration transpiration { //amended
    }
    vg::LeafTemperature temperature { //amended
    }
    vg::LeafPhotosynthesis photosynthesis { //amended
      vg::LeafLightResponse lightResponse { //amended
        LeafLightResponseProcesses processes { //amended
        }
      }
    }
    vg::CropGrowth growth { //amended
    }
  }
  vg::Budget budget {
  }
  OutputR output {
    vg::Outputs p {
      .onlyNumbers = FALSE
    }
    OutputText text {
      .ports = (calendar[dateTime] output/p[*])
      .skipInitialRows = 480
      .useLocalDecimalChar = TRUE
    }
  }
}
