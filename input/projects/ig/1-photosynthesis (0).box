Simulation ig {
  Box sensor {
    +indoorsTemperature = 22
    +indoorsRh = 70
    +indoorsCo2 = 600
    +outdoorsTemperature = 12
    +outdoorsRadiation = 300
    +soilTemperature = 10
    +skyTemperature = -200
  }
  Calendar calendar {
    .latitude = 62
    .initialDateTime = 15/6/2001
    .timeStep = 1
    .timeUnit = "m"
  }
  Outdoors outdoors {
  }
  Box construction{
    vg::Geometry geometry{
      .numSpans = 1
      .spanWidth = 20
      .length = 50
      .height = 4
      .roofPitch = 26
      .reflection = 0.1
      .horizontalScreenState = construction/shelter[horizontalScreenState]  
    }
    vg::Shelter shelter {
    }
  }
  Box indoors {
    Box given {
      Box energyFlux {
        EnergyFluxFloor floor {
          .indoorsTemperature = sensor[indoorsTemperature]
          .soilTemperature = sensor[soilTemperature]
        }
        EnergyFluxShelter shelter{ 
          .indoorsTemperature = sensor[indoorsTemperature]
          .outdoorsTemperature = sensor[outdoorsTemperature]
          .skyTemperature = sensor[skyTemperature]
          .radiationFluxCropTop = crop/layers/top/radiationAbsorbed[shelterLoss]
          .radiationFluxCropMiddle = crop/layers/middle/radiationAbsorbed[shelterLoss]
          .radiationFluxCropBottom = crop/layers/bottom/radiationAbsorbed[shelterLoss]
        }
      }
    }
    vg::IndoorsLight light {
      .sunlightDiffuse = construction/shelter[diffuseLightTransmitted]
      .sunlightDirect = construction/shelter[directLightTransmitted]
      .sunlightPropPar = 0.5 //outdoors[propParRadiation]
      .growthLigthtsDirect = growthLights[shortWaveEmission]
      .growthLigthtsPar = growthLights[parEmission]
    }    
  }
  Box controllers {
    Box chalk {
      +value = 0
    }
    vg::GrowthLightController growthLight{
      vg::AnyFlag on{ 
        vg::DateTimeSignal { 
          .signalInside = ./on[signal]
          vg::ThresholdSignal on{ 
            .threshold = 40
            .input = sensor[outdoorsRadiation]
            .signalBelow = 1
            .signalAbove = 0
          }
        }
      }
      vg::AnyFlag off{ 
        vg::DateTimeSignal {
          .signalInside = ./off[signal]
          vg::ThresholdSignal off{ 
            .threshold = 60
            .input = sensor[outdoorsRadiation]
            .signalBelow = 0
            .signalAbove = 1
          }
        }
      }
      vg::AnyFlag periods{ 
        vg::DateTimeSignal { 
          .beginTime = calendar[sunrise]
          .endTime = calendar[sunset]
        }
      }
    }
  }
  Box actuators {
    GrowthLights growthLights{
      GrowthLight {
        .type = "HPSL"
        .intensity = 60
        .ballastCorrection = 1
        .age = 2000
        .lifeTime = 12000
        .on = controllers/growthLight[signal]
      }
    }
  }
  Box crop {
    Box lai {
      +value = 3.5
      +fractionPlantArea = 1
    }
    Maker layers{ 
      .fileName = "layers-setup.txt"
      vg::LeafLayer { 
        LeafWindSpeed windSpeed{ 
          .indoorsWindSpeed = 1 //indoors/windSpeed[value]
          .xGauss = ..[xGaussUpperside]
          .lai = crop/lai[value]
        }  
        vg::StomatalResistanceRose rs{ 
          .co2 = sensor[indoorsCo2]
          .rh = sensor[indoorsRh]
          .Pn = ../photosynthesis[Pn]
          .rbCO2 = ../rb[rbCo2]
          .lai = crop/lai[value]
        }
        vg::BoundaryLayerResistanceStanghellini rb{ 
          .leafDimension = 0.025
          .leafWindSpeed = ../windSpeed[value]
          .leafTemperature = ../temperature[value]
          .indoorsTemperature = sensor[indoorsTemperature]
        }
        vg::LeafRadiationAbsorbed radiationAbsorbed{
          .lai = crop/lai[value]
          .indoorsLight = sensor[indoorsLightTotal]
          .lightAbsorptivity = ../photosynthesis[absorptivity]
          .growthLightLw = actuators/growthLights[longWaveEmission]
          .floorTemperature = energyFlux/floor[temperature]
          .floorEmissivity = energyFlux/floor[emissivity]
          .leafTemperature = ../temperature[value]
          .coverTemperature = given/energyFlux/shelter[coverTemperature]
          .screensTemperature = given/energyFlux/shelter[screensTemperature]
          .screensMaxState = construction/shelter[screensMaxState]
          .shelterOutgoingLwAbsorptivity = construction/shelter[outgoingLwAbsorptivity]
          .coverPerGroundArea = construction/geometry[coverPerGroundArea]
        }
      }
    }
  }  
}