Simulation sim {
  .steps = 30
  Calendar calendar {
    .timeStep = 1
    .timeUnit = "d"
    .initialDateTime = 1/4/2001
  }
  Box weather {
    +temperature = ./records[Tair]
    +windspeed = ./records[Windspeed]
    Records records {
      .fileName = "weather_denmark.txt"
    }
  } 
  Box hive {
    apis::LifeStage egg {
      .bufferSize = 10 #250
      .numberNew = 50
      .massNew = 0.15
      Gompertz Pmorph {
        .x = ..[age]
        .dx = calendar[timeStepDays]
        .x0 = 2.5
        .y0 = 0.01
        .x1 = 5.5
        .y1 = 0.99
      }
    }
    apis::LifeStage larva {
      .bufferSize = 25 #300
      .numberNew = ../egg[numberMorphed]
      .massNew = ../egg[massMorphed]
      Exponential massIncrement {
        .y = ..[mass]
        .r = 0.326    # log(140/0.15)/21
        .yMax = 150
      }
      Gompertz Pmorph {
        .x = ..[mass]
        .dx = ../massIncrement[y]
        .x0 = 130
        .y0 = 0.01 
        .x1 = 150
        .y1 = 0.99
      }
      NectarDemand demand {
        .numberWorkers = worker[number]
        .numberLarvae = ..[number]
        .massIncrement = ../massIncrement[dy]
        .conversionRatio = 1.5  # Harbo (JAR, 1993)
        .workerDemand = 7       # Harbo (JAR, 1993); for nurse bee or pollen-foraging bee
      }
    NectarDemandTotal demandTotal {
    .numberForagers(transform=Sum) = worker[number]
    }
    }
    apis::LifeStage worker {
      .bufferSize = 75 #1800
      .numberInit = 5000
      .numberNew = ../larva[numberMorphed]
      .massNew = ../larva[massMorphed]
      Gompertz Pmorph {
        .x = ..[age]
        .dx = calendar[timeStepDays]
        .x0 = 20
        .y0 = 0.01
        .x1 = 35
        .y1 = 0.95
      }
    }
  }
  NectarFlow nectarFlow {
    .minFlow = 100
    .maxFlow = 1000
    .beginDate = 3/5/*
    .endDate = 10/5/*
    .beginTime = 7:00
    .endTime = 12:00
    .concentration = 0.20 # Kim et al. (2011) http://www.pnas.org/content/108/40/16618.full
  }
  OutputR {
    #.script = "honey_bee.R"
    PageR p1 {
      .xAxis = calendar[dateTime]
      .width = 12
      .height = 8
      PlotR {
        .nrow = 3
        .ports = (*[numberSum] *[numberMorphed] *[massMorphed])
      }
      PlotR {
        .nrow = 3
        .ports = (weather[temperature] nectarFlow[flow] demand[demandTotal] demandTotal[nectarDemandTotal])
      }
      PlotR {
        .hide = TRUE
        .ports = (larva[number] larva[mass] larva/massIncrement[y] larva/massIncrement[dy])
        }
    }
  }
}
