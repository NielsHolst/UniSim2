Simulation sim {
  .steps = 2400
  Calendar calendar {
    .timeStep = 1
    .timeUnit = "h"
    .initialDateTime = 1/2/2001
  }
  
  Box weather {
    +temperature = ./records[Tair]
    +windspeed = ./records[Windspeed]
    Records records {
      .fileName = "weather_denmark.txt"
    }
  } 
  
  NectarFlow nectarFlow {
    .maxFlow = 500 // ml/h
    .beginDate = 1/4/*
    .endDate = 31/8/*
    .beginTime = 7:00
    .endTime = 12:00
  }
  
  Box hive {
    +mass(transform=Sum) = *[massSum] | honey[holding]
    Box demand {
      HoneyDemandRespiration respiration {
        .respirationRate = 7       // (mg/d) Harbo (JAR, 1993); for nurse bee    
      }
      HoneyDemandGrowth growth {
        .cohortNumbers = larva[number]
        .cohortDemands = ./massIncrement[dy]
        .cost = 0.3     // Harbo (JAR, 1993)
        Exponential massIncrement {
          .y = larva[mass]
          .dt = calendar[timeStepDays]
          .r = 1.243    // log(140/0.15)/5.5
          .yMax = 150
        }
      }
    }

    Box supply {
      HoneySupply honey {
        .cohortNumbers = forager[number]
        .conversionFactor = 0.3
      }
    }

    EnergyBudget budget {
      .supplyPotential = ../supply/honey[value]
      .demandRespiration = ../demand/respiration[value]
      .demandGrowth = ../demand/growth[value]
      .storeHolding = ../honey[holding]
      .storeCapacity = ../honey[capacity]
    }
    
    HoneyStore honey {
      .initial = 10
      .change = ../budget[changeInStore]
    }
    
    apis::LifeStage egg {
      .maxAge = 5
      .numberNew = ./fecundity[value]
      .massNew = 0.15
      apis::Fecundity fecundity {
        .maxFecundity = 1800
        .slope = 7680
        .intercept = -53800
      }
      Gompertz Pmorph {
        .x = ..[age]
        .dx = calendar[timeStepDays]
        .x0 = 2.5
        .y0 = 0.01
        .x1 = 3.5
        .y1 = 0.99
      }
    }
    apis::LifeStage larva {
      .maxAge = 11
      .numberNew = ../egg[numberMorphed]
      .massNew = ../egg[massMorphed]
      .massIncrement = ./supply[cohortSupplies]
      HoneySupplyGrowth supply {}
      Gompertz Pmorph {
        .x = ..[mass]
        .dx = ../supply[cohortSupplies]
        .x0 = 130
        .y0 = 0.01 
        .x1 = 150
        .y1 = 0.99
      }
    }
    apis::LifeStage capped {
      .maxAge = 16
      .numberNew = ../larva[numberMorphed]
      .massNew = ../larva[massMorphed]
      Gompertz Pmorph {
        .x = ..[age]
        .dx = calendar[timeStepDays]
        .x0 = 13
        .y0 = 0.01
        .x1 = 14
        .y1 = 0.99
      }
    }
    apis::LifeStage housekeeper {
      .maxAge = 35 
      .numberInit = 2000
      .massInit = 150
      .numberNew = ../capped[numberMorphed]
      .massNew = ../capped[massMorphed]
      Gompertz Pmorph {
        .x = ..[age]
        .dx = calendar[timeStepDays]
        .x0 = 18
        .y0 = 0.05
        .x1 = 28
        .y1 = 0.99
      }
    }
    apis::LifeStage forager {
      .maxAge = 30 
      .numberInit = 2000
      .massInit = 150
      .numberNew(transform=Sum) = ../housekeeper[numberMorphed]|../housekeeper[numberMorphed]
      .massNew(transform=Sum) = ../housekeeper[massMorphed]|../housekeeper[massLeaked]
      Box recruitment {
        Box conditions {
          +all(transform=Min) = ./*[value]
          Transition sunrise {
            .input = calendar[time]
            .threshold = calendar[sunrise]
            .thresholdBand = 0.5 // half an hour
          }
          Transition sunset {
            .input = calendar[time]
            .threshold = calendar[sunset]
            .thresholdBand = 0.25 // quarter of an hour
            .increasingValue = FALSE
          }
          Transition wind {
            .input = weather[windspeed]
            .threshold = 8
            .thresholdBand = 10
            .increasingValue = FALSE
          }
          Transition temperature {
            .input = weather[temperature]
            .threshold = 8
            .thresholdBand = 12
          }
         }
      }
      Gompertz Pmorph {
        .x = ..[age]
        .dx = calendar[timeStepDays]
        .x0 = 2
        .y0 = 0.01
        .x1 = 17
        .y1 = 0.99
      }
    }
  }
  
  OutputR {
    .popUp = TRUE
    .width = 12
    .height = 8
    .end = "honeybee_end.R"
    +fecundity = fecundity[rate]
    +honeyStoreChange = honey[change]
    +honeyStoreHolding = honey[holding]
    PageR p1 {
      .xAxis = calendar[dateTime]
      .xMin = 1/5/2001
      .xMax = 3/5/2001
      PlotR  {
        .nrow = 4
        .ports = (*[numberSum] ..[fecundity] nectarFlow[rate] supply/honey[rate] ..[honeyStoreHolding] ..[honeyStoreChange]
                   housekeeper[massSum] forager[massSum] hive[mass])
        .end = "scripts/month_breaks.R"
      }
    }
    PageR p2 {
      .xAxis = calendar[dateTime]
      PlotR  {
        .nrow = 4
        .ports = (*[numberSum] ..[fecundity] nectarFlow[rate] supply/honey[rate] ..[honeyStoreHolding] ..[honeyStoreChange]
                   housekeeper[massSum] forager[massSum] hive[mass])
        .end = "scripts/month_breaks.R"
      }
    }

    // PageR p1 {
      // .xAxis = calendar[dateTime]
      // PlotR {
        // .ncol = 5
        // .ports = (*[ageAverage] *[numberSum] *[massAverage])
        // .end = "scripts/month_breaks.R"
      // }
      // PlotR {
        // .ports = (nectarFlow[rate] supply/honey[rate] 
                   // demand/respiration[rate] demand/growth[rate] 
                   // demand/respiration[total] demand/growth[netTotal] demand/growth[costTotal])
        // .end = "scripts/month_breaks.R"
      // }
    // }
    // PageR p2 {
      // .xAxis = calendar[dateTime]
      // PlotR {
        // .ncol = 2
        // .ports = (nectarFlow[rate] supply/honey[rate] 
                   // demand/respiration[rate] demand/growth[rate] 
                   // demand/respiration[total] demand/growth[netTotal] demand/growth[costTotal] fecundity[rate])
        // .end = "scripts/month_breaks.R"
      // }
    // }
    // PageR p3 {
      // .xAxis = calendar[dateTime]
      // PlotR {
        // .ports = (budget[supplyPotential] budget[supplyAvailable] budget[changeInStore])
      // }
      // PlotR {
        // .ports = (budget[supplyDemandRespiration] budget[supplyDemandGrowth])
      // }
      // PlotR {
        // .ports =(honey[holding])
      // }
      // PlotR {
        // .layout = "merged"
        // .ports =(recruitment/conditions/sunrise[value] recruitment/conditions/sunset[value] recruitment/conditions/temperature[value] recruitment/conditions/wind[value])
      // }
      // PlotR {
        // .ports =(recruitment/conditions[all])
      // }
    // }
  }
}
