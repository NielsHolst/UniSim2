Simulation sim {
  .iterations = 10
  .steps = 0
  .silent = TRUE
  .stopSteps|all = ./stop/*[isOn]
  .useStopSteps = TRUE
  .stopIterations = sc[atEnd]
  .useStopIterations = TRUE
  Box stop {
    OnOff onR {
      .x = frequencies[thresholdGen]
      .xOn = 1
      .xOff = 1e6
    }
    OnOff onDensity {
      .x = density[thresholdGen]
      .xOn = 1
      .xOff = 1e6
    }
  }
  Scenarios sc {
    .fileName = "resist-6-1-sa-generated-scenarios"
  }
  Box random {
    RandomUniform K {
      .restartAtReset = TRUE
      .minValue = 5000
      .maxValue = sc[K.maxValue]
      .drawAtReset = TRUE
      .drawAtUpdate = TRUE
    }
    RandomUniform coverage {
      .restartAtReset = TRUE
      .minValue = 0
      .maxValue = sc[coverage.maxValue]
      .drawAtReset = TRUE
      .drawAtUpdate = TRUE
    }
    Box immigration {
      RandomUniform proportion {
        .restartAtReset = TRUE
        .minValue = ./bounds[Pmin]
        .maxValue = ./bounds[Pmax]
        .drawAtReset = TRUE
        .drawAtUpdate = TRUE
        ProportionBounds bounds {
          .logP = sc[proportion.bounds.logP]
          .logWidth = 2
        }
      }
      RandomUniform q {
        .restartAtReset = TRUE
        .minValue = ./bounds[Pmin]
        .maxValue = ./bounds[Pmax]
        .drawAtReset = TRUE
        .drawAtUpdate = TRUE
        ProportionBounds bounds {
          .logP = sc[q.bounds.logP]
          .logWidth = 2
        }
      }
    }
  }
  Box pest {
    resist::Immigration immigration {
      .K = random/K[value]
      .proportion = random/immigration/proportion[value]
      .q = random/immigration/q[value]
    }
    SpraySurvival survival {
      .coverage = random/coverage[value]
      .maxMortality = sc[maxMortality]
      .slope = sc[slope]
      .resistanceGain = sc[resistanceGain]
    }
    Density density {
      .immigration = immigration[values]
      .reproduction = reproduction[values]
      .survival = survival[values]
      .densityThreshold = 30000
    }
    ReproductiveRate reproductiveRate {
      .R = sc[R]
      .fitnessPenalty = sc[fitnessPenalty]
      .Ntotal|sum = density[values]
      .K = random/K[value]
    }
    Reproduction reproduction {
      .N = density[values]
      .R = reproductiveRate[values]
    }
    GeneFrequencies frequencies {
      .N = density[values]
      .rThreshold = 0.5
    }
  }
  OutputText {
    .ports = *<Distribution>/..<Port>
  }
  // OutputR output {
    // +ggplot = "geom_point(colour='forestgreen', alpha=0.4)  +
          // stat_quantile(formula=y ~ bs(x, df=4), quantiles = 0.25, colour='brown') +
          // stat_quantile(formula=y ~ bs(x, df=4), quantiles = 0.50, size=1, colour='brown') +
          // stat_quantile(formula=y ~ bs(x, df=4), quantiles = 0.75, colour='brown')"
    // .end = "resist-6-sa-end.R"
    // PageR {
      // .xAxis = *<Distribution>/..<Port>
      // .title = "Resistance threshold"
      // PlotR {
        // .ports = frequencies[thresholdGen]|end
        // .transform = "log10"
        // .ggplot = output[ggplot]
      // }
    // }
    // PageR {
      // .xAxis = *<Distribution>/..<Port>
      // .title = "Density threshold"
      // PlotR {
        // .ports = density[thresholdGen]|end
        // .transform = "log10"
        // .ggplot = output[ggplot]
      // }
    // }
  // }
}