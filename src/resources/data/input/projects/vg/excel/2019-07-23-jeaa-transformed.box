Simulation greenhouse { // #230
  .steps = ./period[steps]
  SimulationPeriod period { // #0
    .beginDate = 2019/1/1
    .endDate = 2019/12/31
    .beginTime = 00:00:00
    .endTime = 00:00:00
    .timeStep = 4
    .timeUnit = "m"
  }
  Calendar calendar { // #1
    .latitude = 55.5
    .longitude = 10.5
    .initialDateTime = ../period[beginDateTime]
    .timeStep = ../period[timeStep]
    .timeUnit = ../period[timeUnit]
  }
  vg::Outdoors outdoors { // #8
    Records records { // #2
      .fileName = "..\input\DNK_Dry.txt"
    }
    DiffuseIrradiationRE diffuseIrradiationEstimate { //amended // #3
    }
    SkyTemperature skyTemperatureEstimate { //amended // #4
    }
    Accumulator soilTemperature { //amended // #7
      .initial = ./initial[value]
      .change = ./controller[controlVariable]
      Hump initial { //amended // #5
        .x = calendar[dayOfYear]
        .x0 = 70.0
        .x1 = 365.0
        .ymin = 0.0
        .ymax = 16.0
      }
      PidController controller { //amended // #6
        .sensedValue = ..[value]
        .desiredValue = outdoors[temperature]
        .Kprop = 5e-5
      }
    }
  }
  Box construction { // #33
    vg::Geometry geometry { // #9
      .orientation = 0.0
      .numSpans = 26
      .spanWidth = 4.0
      .length = 100.0
      .height = 4.0
      .roofPitch = 26.0
      .reflection = 0.2
    }
    vg::Shelter shelter { // #32
      vg::ShelterFace roof1 { // #14
        vg::Cover cover { // #10
          .transmissivity = 0.89
          .U4 = 6.5
        }
        vg::Screens screens { // #12
          vg::Screen energy { // #11
            .orientation = "cover"
            .transmissivityLight = 0.7
            .energyLossReduction = 0.45
            .transmissivityAir = 0.03
            .state = actuators/screens/energy[value]
          }
        }
        Vent vent { //amended // #13
        }
      }
      vg::ShelterFace roof2 { // #19
        vg::Cover cover { // #15
          .transmissivity = 0.89
          .U4 = 6.5
        }
        vg::Screens screens { // #17
          vg::Screen energy { // #16
            .orientation = "cover"
            .transmissivityLight = 0.7
            .energyLossReduction = 0.45
            .transmissivityAir = 0.03
            .state = actuators/screens/energy[value]
          }
        }
        Vent vent { //amended // #18
        }
      }
      vg::ShelterFace side1 { // #22
        vg::Cover cover { // #20
          .transmissivity = 0.89
          .U4 = 6.5
        }
        vg::Screens screens { // #21
        }
      }
      vg::ShelterFace side2 { // #25
        vg::Cover cover { // #23
          .transmissivity = 0.89
          .U4 = 6.5
        }
        vg::Screens screens { // #24
        }
      }
      vg::ShelterFace end1 { // #28
        vg::Cover cover { // #26
          .transmissivity = 0.89
          .U4 = 6.5
        }
        vg::Screens screens { // #27
        }
      }
      vg::ShelterFace end2 { // #31
        vg::Cover cover { // #29
          .transmissivity = 0.89
          .U4 = 6.5
        }
        vg::Screens screens { // #30
        }
      }
    }
  }
  vg::Indoors indoors { // #69
    vg::Given given { // #52
      vg::AirFluxGiven airFlux { // #35
        vg::AirFluxInfiltration infiltration { // #34
          .leakage = 0.05
        }
      }
      vg::EnergyFluxSum energyFlux { // #46
        vg::EnergyFluxFloor floor { // #37
          .Uindoors = 7.5
          .Usoil = 4.0
          .heatCapacity = 1000.0
          .emissivity = 0.85
          vg::FloorRadiationAbsorbed radiationAbsorbed { // #36
            .reflectance = 0.5
          }
        }
        EnergyFluxCondensation condensationCover { //amended // #38
          .vapourFlux = ../../vapourFlux/condensationCover[vapourFlux]
        }
        EnergyFluxCondensation condensationScreens { //amended // #39
          .vapourFlux = ../../vapourFlux/condensationScreens[vapourFlux]
        }
        EnergyFluxAir airFlux { //amended // #40
          .airFlux = given/airFlux[value]
        }
        Accumulator growthLights { //amended // #42
          .change = ./controller[controlVariable]
          PidController controller { //amended // #41
            .sensedValue = ..[value]
            .desiredValue = actuators/growthLights[powerUsage]
            .Kprop = 0.1
          }
        }
        EnergyFluxShelter shelter { //amended // #43
        }
        EnergyFluxSunlight sunlight { //amended // #44
        }
        EnergyFluxTranspiration transpiration { //amended // #45
        }
      }
      VapourFluxSum vapourFlux { //amended // #51
        VapourFluxTranspiration transpiration { //amended // #47
        }
        VapourFluxCondensation condensationCover { //amended // #48
          .surfaceAreaPerGroundArea = geometry[coverPerGroundArea]
          .surfaceTemperature = given/energyFlux/shelter[coverTemperature]
        }
        VapourFluxCondensation condensationScreens { //amended // #49
          .surfaceAreaPerGroundArea = geometry[coverPerGroundArea]
          .surfaceTemperature = given/energyFlux/shelter[screensTemperature]
        }
        VapourFluxAir airFluxOutdoors { //amended // #50
          .airFlux = given/airFlux[value]
        }
      }
    }
    Controlled controlled { //amended // #59
      Box cooling { //amended // #56
        AirFluxVents airFluxVents { //amended // #53
        }
        vg::VapourFluxAir vapourFlux { //amended // #54
          .airFlux = ../airFluxVents[value]
        }
        vg::EnergyFluxAir energyFlux { //amended // #55
          .airFlux = ../airFluxVents[value]
        }
      }
      Box heating { //amended // #58
        EnergyFluxHeating energyFlux { //amended // #57
        }
      }
    }
    Box total { //amended // #63
      vg::Sum airFlux { //amended // #60
        .inputs = (given/airFlux[value] cooling/airFluxVents[value])
      }
      vg::VapourFluxSum vapourFlux { //amended // #61
        .toAdd = (given/vapourFlux cooling/vapourFlux)
      }
      vg::Sum energyFlux { //amended // #62
        .inputs = (given/energyFlux[value] controlled/cooling/energyFlux[value] controlled/heating/energyFlux[value])
      }
    }
    vg::IndoorsLight light { //amended // #64
    }
    vg::IndoorsTemperature temperature { //amended // #65
      .energyFlux = total/energyFlux[value]
    }
    vg::IndoorsHumidity humidity { //amended // #66
    }
    vg::IndoorsCo2 co2 { //amended // #67
    }
    vg::IndoorsWindSpeed windSpeed { //amended // #68
    }
  }
  Box allSetpoints { // #124
    PrioritySignal heatingTemperatureAtLowRh { // #71
      .reverseOrder = TRUE
      Box default { // #70
        +signal = 20.0
      }
    }
    PrioritySignal ventilationTemperatureMargin { // #73
      .reverseOrder = TRUE
      Box default { // #72
        +signal = 5.0
      }
    }
    PrioritySignal rhMax { // #75
      .reverseOrder = TRUE
      Box default { // #74
        +signal = 90.0
      }
    }
    PrioritySignal heatingTemperatureMargin { // #77
      .reverseOrder = TRUE
      Box default { // #76
        +signal = 2.0
      }
    }
    PrioritySignal ventilationTemperatureRhMargin { // #79
      .reverseOrder = TRUE
      Box default { // #78
        +signal = 2.0
      }
    }
    PrioritySignal ventilationThresholdBand { // #81
      .reverseOrder = TRUE
      Box default { // #80
        +signal = 1.0
      }
    }
    PrioritySignal co2Capacity { // #83
      .reverseOrder = TRUE
      Box default { // #82
        +signal = 10.0
      }
    }
    PrioritySignal co2Setpoint { // #85
      .reverseOrder = TRUE
      Box default { // #84
        +signal = 900.0
      }
    }
    PrioritySignal co2VentilationThreshold { // #87
      .reverseOrder = TRUE
      Box default { // #86
        +signal = 0.1
      }
    }
    PrioritySignal co2VentilationBand { // #89
      .reverseOrder = TRUE
      Box default { // #88
        +signal = 0.2
      }
    }
    PrioritySignal chalk { // #91
      .reverseOrder = TRUE
      Box default { // #90
        +signal = 0.0
      }
    }
    PrioritySignal growthLightThresholdLow { // #93
      .reverseOrder = TRUE
      Box default { // #92
        +signal = 40.0
      }
    }
    PrioritySignal growthLightThresholdHigh { // #95
      .reverseOrder = TRUE
      Box default { // #94
        +signal = 1000.0
      }
    }
    PrioritySignal growthLightActive { // #97
      .reverseOrder = TRUE
      Box default { // #96
        +signal = 1.0
      }
    }
    PrioritySignal rhMaxBand { // #99
      .reverseOrder = TRUE
      Box default { // #98
        +signal = 0.0
      }
    }
    PrioritySignal dawnThreshold { // #101
      .reverseOrder = TRUE
      Box default { // #100
        +signal = 0.2
      }
    }
    PrioritySignal duskThreshold { // #103
      .reverseOrder = TRUE
      Box default { // #102
        +signal = 0.3
      }
    }
    PrioritySignal crackVentilation { // #105
      .reverseOrder = TRUE
      Box default { // #104
        +signal = 5.0
      }
    }
    PrioritySignal crackVentilationTemperatureMin { // #107
      .reverseOrder = TRUE
      Box default { // #106
        +signal = 0.0
      }
    }
    PrioritySignal crackVentilationTemperatureMinBand { // #109
      .reverseOrder = TRUE
      Box default { // #108
        +signal = 1.0
      }
    }
    PrioritySignal screenEnergyThreshold { // #111
      .reverseOrder = TRUE
      Box default { // #110
        +signal = 5.0
      }
    }
    PrioritySignal screenEnergyThresholdBand { // #113
      .reverseOrder = TRUE
      Box default { // #112
        +signal = 5.0
      }
    }
    PrioritySignal screenShadeThreshold { // #115
      .reverseOrder = TRUE
      Box default { // #114
        +signal = 500.0
      }
    }
    PrioritySignal screenShadeThresholdBand { // #117
      .reverseOrder = TRUE
      Box default { // #116
        +signal = 0.0
      }
    }
    PrioritySignal screenBlackoutFromTimeFloat { // #119
      .reverseOrder = TRUE
      Box default { // #118
        +signal = 0.5
      }
    }
    PrioritySignal screenBlackoutToTimeFloat { // #121
      .reverseOrder = TRUE
      Box default { // #120
        +signal = 0.791667
      }
    }
    PrioritySignal screenMaxAtHighRh { // #123
      .reverseOrder = TRUE
      Box default { // #122
        +signal = 90.0
      }
    }
  }
  vg::Setpoints setpoints { // #133
    .heatingTemperatureAtLowRh = allSetpoints/heatingTemperatureAtLowRh[value]
    .heatingTemperatureMargin = allSetpoints/heatingTemperatureMargin[value]
    .ventilationTemperatureMargin = allSetpoints/ventilationTemperatureMargin[value]
    .ventilationTemperatureRhMargin = allSetpoints/ventilationTemperatureRhMargin[value]
    .rhMax = allSetpoints/rhMax[value]
    .rhMaxBand = allSetpoints/rhMaxBand[value]
    .co2Capacity = allSetpoints/co2Capacity[value]
    .co2Setpoint = allSetpoints/co2Setpoint[value]
    .dawnThreshold = allSetpoints/dawnThreshold[value]
    .duskThreshold = allSetpoints/duskThreshold[value]
    vg::DaylightLevel daylightLevel { //amended // #125
      .dawnThreshold = setpoints[dawnThreshold]
      .duskThreshold = setpoints[duskThreshold]
    }
    Box temperature { //amended // #132
      Accumulator ventilation { //amended // #128
        .initial = ./controller/target[maxSignal]
        .change = ./controller[controlVariable]
        PidController controller { //amended // #127
          .sensedValue = ..[value]
          .desiredValue = ./target[signal]
          .Kprop = 0.1
          vg::ProportionalSignal target { //amended // #126
            .input = indoors/humidity[rh]
            .threshold = setpoints[rhMax]
            .thresholdBand = setpoints[rhMaxBand]
            .minSignal = setpoints[ventilationTemperatureAtHighRh]
            .maxSignal = setpoints[ventilationTemperatureAtLowRh]
            .increasingSignal = FALSE
          }
        }
      }
      Accumulator heating { //amended // #131
        .initial = ./controller/target[maxSignal]
        .change = ./controller[controlVariable]
        PidController controller { //amended // #130
          .sensedValue = ..[value]
          .desiredValue = ./target[signal]
          .Kprop = 0.1
          vg::ProportionalSignal target { //amended // #129
            .input = indoors/humidity[rh]
            .threshold = setpoints[rhMax]
            .thresholdBand = setpoints[rhMaxBand]
            .minSignal = setpoints[heatingTemperatureAtHighRh]
            .maxSignal = setpoints[heatingTemperatureAtLowRh]
            .increasingSignal = TRUE
          }
        }
      }
    }
  }
  vg::Controllers controllers { // #158
    .ventilationThresholdBand = allSetpoints/ventilationThresholdBand[value]
    .crackVentilation = allSetpoints/crackVentilation[value]
    .crackVentilationTemperatureMin = allSetpoints/crackVentilationTemperatureMin[value]
    .crackVentilationTemperatureMinBand = allSetpoints/crackVentilationTemperatureMinBand[value]
    .screenMaxAtHighRh = allSetpoints/screenMaxAtHighRh[value]
    .screenEnergyThreshold = allSetpoints/screenEnergyThreshold[value]
    .screenEnergyThresholdBand = allSetpoints/screenEnergyThresholdBand[value]
    .screenShadeThreshold = allSetpoints/screenShadeThreshold[value]
    .screenShadeThresholdBand = allSetpoints/screenShadeThresholdBand[value]
    .screenBlackoutFromTimeFloat = allSetpoints/screenBlackoutFromTimeFloat[value]
    .screenBlackoutToTimeFloat = allSetpoints/screenBlackoutToTimeFloat[value]
    .chalk = allSetpoints/chalk[value]
    ProportionalSignal ventilation { //amended // #136
      .input = indoors/temperature[value]
      .threshold = setpoints/temperature/ventilation[value]
      .thresholdBand = controllers[ventilationThresholdBand]
      .minSignal = ./crack[value]
      .maxSignal = 1.0
      ProportionalSignal crack { //amended // #135
        .input = indoors/humidity[rh]
        .threshold = setpoints[rhMax]
        .thresholdBand = setpoints[rhMaxBand]
        .minSignal = 0.0
        .maxSignal = ./minsMax[value]
        ProportionalSignal minsMax { //amended // #134
          .input = outdoors[temperature]
          .threshold = controllers[crackVentilationTemperatureMin]
          .thresholdBand = controllers[crackVentilationTemperatureMinBand]
          .minSignal = 0.0
          .maxSignal = controllers[crackVentilation]
        }
      }
    }
    Accumulator heating { //amended // #138
      .change = ./controller[controlVariable]
      .minValue = 0.0
      .maxValue = 1.0
      PidController controller { //amended // #137
        .sensedValue = indoors/temperature[value]
        .desiredValue = setpoints/temperature/heating[value]
        .Kprop = 0.1
      }
    }
    Box screens { //amended // #153
      Accumulator maxDrawn { //amended // #141
        .initial = 1.0
        .change = ./controller[controlVariable]
        .minValue = 0.0
        .maxValue = 1.0
        PidController controller { //amended // #140
          .sensedValue = ..[value]
          .desiredValue = ./target[signal]
          .Kprop = 0.02
          vg::ThresholdSignal target { //amended // #139
            .threshold = setpoints[rhMax]
            .input = indoors/humidity[rh]
            .signalBelow = 1.0
            .signalAbove = controllers[screenMaxAtHighRh]
          }
        }
      }
      Minimum energy { //amended // #144
        .values = ./signals/*[signal]
        Box signals { //amended // #143
          vg::ProportionalSignal radiation { //amended // #142
            .input = outdoors[radiation]
            .threshold = controllers[screenEnergyThreshold]
            .thresholdBand = controllers[screenEnergyThresholdBand]
            .minSignal = 0.0
            .maxSignal = controllers/screens/maxDrawn[value]
            .increasingSignal = FALSE
          }
        }
      }
      Maximum shade { //amended // #148
        .values = ./signals/*[signal]
        Box signals { //amended // #147
          vg::ProportionalSignal radiation { //amended // #145
            .input = outdoors[radiation]
            .threshold = controllers[screenShadeThreshold]
            .thresholdBand = controllers[screenShadeThresholdBand]
            .minSignal = 0.0
            .maxSignal = controllers/screens/maxDrawn[value]
          }
          Box asEnergy { //amended // #146
            +signal = controllers/screens/energy[value]
          }
        }
      }
      Maximum blackout { //amended // #152
        .values = ./signals/*[signal]
        Box signals { //amended // #151
          vg::DateTimeSignal time { //amended // #149
            .beginTime = controllers[screenBlackoutFromTime]
            .endTime = controllers[screenBlackoutToTime]
            .signalInside = setpoints/daylightLevel[day]
          }
          Box asEnergy { //amended // #150
            +signal = controllers/screens/energy[value]
          }
        }
      }
    }
    vg::GrowthLightController growthLight { //amended // #154
    }
    Accumulator co2 { //amended // #157
      .change = ./controller[controlVariable]
      .minValue = 0.0
      .maxValue = ./co2Capacity[value]
      PidController controller { //amended // #155
        .sensedValue = indoors/co2[value]
        .desiredValue = setpoints[co2Setpoint]
        .Kprop = 0.1
      }
      vg::ProportionalSignal co2Capacity { //amended // #156
        .input = actuators/vents[value]
        .threshold = setpoints[co2VentilationThreshold]
        .thresholdBand = setpoints[co2VentilationBand]
        .minSignal = 0.0
        .maxSignal = setpoints[co2Capacity]
        .increasingSignal = FALSE
      }
    }
  }
  vg::Actuators actuators { // #174
    GrowthLights growthLights { // #160
      vg::GrowthLight growthLight { // #159
        .intensity = 50.0
        .parPhotonCoef = 1.611
        .age = 0.0
        .lifeTime = 12000.0
      }
    }
    ProportionalSignal heating { // #164
      .signalReset = indoors/temperature[value]
      .input = controllers/heating[value]
      .threshold = 0.0
      .thresholdBand = 1.0
      .minSignal = indoors/temperature[value]
      .maxSignal = 60.0
      Box pipes { // #163
        vg::Pipe pipe { // #161
          .density = 1.822
          .diameter = 41.0
          .flowRate = 5.0
          .minTemperature = 20.0
          .maxTemperature = 80.0
        }
        vg::Pipe pipe { // #162
          .density = 1.822
          .diameter = 41.0
          .flowRate = 5.0
          .minTemperature = 20.0
          .maxTemperature = 80.0
        }
      }
    }
    Box screens { //amended // #171
      Accumulator energy { //amended // #166
        .change = ./controller[controlVariable]
        .minValue = 0.0
        .maxValue = 1.0
        PidController controller { //amended // #165
          .sensedValue = ..[value]
          .desiredValue = controllers/screens/energy[value]
          .Kprop = 0.05
        }
      }
      Accumulator shade { //amended // #168
        .change = ./controller[controlVariable]
        .minValue = 0.0
        .maxValue = 1.0
        PidController controller { //amended // #167
          .sensedValue = ..[value]
          .desiredValue = controllers/screens/shade[value]
          .Kprop = 0.05
        }
      }
      Accumulator blackout { //amended // #170
        .change = ./controller[controlVariable]
        .minValue = 0.0
        .maxValue = 1.0
        PidController controller { //amended // #169
          .sensedValue = ..[value]
          .desiredValue = controllers/screens/blackout[value]
          .Kprop = 0.05
        }
      }
    }
    Accumulator vents { //amended // #173
      .initial = controllers/ventilation/crack[value]
      .change = ./controller[controlVariable]
      .minValue = 0.0
      .maxValue = 1.0
      PidController controller { //amended // #172
        .sensedValue = ..[value]
        .desiredValue = controllers/ventilation[value]
        .Kprop = 0.1
        .Kint = 0.01
        .Kderiv = 0.2
      }
    }
  }
  vg::Crop crop { // #223
    Box lai { // #175
      +value = 1
      +fractionPlantArea = 0.9
    }
    Box periods { //amended // #177
      DateTimeSignal  { //amended // #176
        .circadian = FALSE
      }
    }
    DayDegrees physTime { //amended // #178
      .T = indoors/temperature[value]
      .timeStepDays = calendar[timeStepDays]
      .resetTotal = ../periods/*[flagDown]
      .isTicking = ../periods/*[flag]
    }
    Box layers { //amended // #206
      vg::LeafLayer top { //amended // #187
        LeafWindSpeed windSpeed { //amended // #179
          .k = 0.6
        }
        vg::StomatalResistanceRose rs { //amended // #180
        }
        vg::BoundaryLayerResistanceStanghellini rb { //amended // #181
        }
        vg::LeafRadiationAbsorbed radiationAbsorbed { //amended // #182
        }
        vg::LeafTranspiration transpiration { //amended // #183
        }
        vg::LeafTemperature temperature { //amended // #184
        }
        vg::LeafPhotosynthesis photosynthesis { //amended // #186
          LeafLightResponse lightResponse { //amended // #185
          }
        }
      }
      vg::LeafLayer middle { //amended // #196
        LeafWindSpeed windSpeed { //amended // #188
          .k = 0.6
        }
        vg::StomatalResistanceRose rs { //amended // #189
        }
        vg::BoundaryLayerResistanceStanghellini rb { //amended // #190
        }
        vg::LeafRadiationAbsorbed radiationAbsorbed { //amended // #191
        }
        vg::LeafTranspiration transpiration { //amended // #192
        }
        vg::LeafTemperature temperature { //amended // #193
        }
        vg::LeafPhotosynthesis photosynthesis { //amended // #195
          LeafLightResponse lightResponse { //amended // #194
          }
        }
      }
      vg::LeafLayer bottom { //amended // #205
        LeafWindSpeed windSpeed { //amended // #197
          .k = 0.6
        }
        vg::StomatalResistanceRose rs { //amended // #198
        }
        vg::BoundaryLayerResistanceStanghellini rb { //amended // #199
        }
        vg::LeafRadiationAbsorbed radiationAbsorbed { //amended // #200
        }
        vg::LeafTranspiration transpiration { //amended // #201
        }
        vg::LeafTemperature temperature { //amended // #202
        }
        vg::LeafPhotosynthesis photosynthesis { //amended // #204
          LeafLightResponse lightResponse { //amended // #203
          }
        }
      }
    }
    vg::CropRadiation radiation { //amended // #207
    }
    vg::Average temperature { //amended // #208
      .inputs = (../layers/*/temperature[value])
    }
    vg::Sum lightAbsorbed { //amended // #209
      .inputs = (../layers/*/radiationAbsorbed[lightAbsorbed])
    }
    vg::Sum heatingAbsorbed { //amended // #210
      .inputs = (../layers/*/radiationAbsorbed[heatingAbsorbed])
    }
    vg::Sum growthLightLwAbsorbed { //amended // #211
      .inputs = (../layers/*/radiationAbsorbed[growthLightLwAbsorbed])
    }
    vg::Sum radiationAbsorbed { //amended // #212
      .inputs = (../layers/*/radiationAbsorbed[lightAbsorbed])
    }
    vg::Average conductance { //amended // #213
      .inputs = (../layers/*/transpiration[conductance])
    }
    vg::Average vapourFlux { //amended // #214
      .inputs = (../layers/*/transpiration[vapourFlux])
    }
    vg::Average gain { //amended // #215
      .inputs = (../layers/*/transpiration[gain])
    }
    vg::Sum Pg { //amended // #216
      .inputs = (../layers/*/photosynthesis[Pg])
    }
    vg::Sum Pn { //amended // #217
      .inputs = (../layers/*/photosynthesis[Pn])
    }
    vg::Sum Rd { //amended // #218
      .inputs = (../layers/*/photosynthesis[Rd])
    }
    vg::CropGrowth growth { //amended // #219
    }
    vg::FruitCropMass mass { //amended // #221
      .vegPropRoot = 0.0
      .vegPropStem = 0.4
      .vegPropLeaf = 0.6
      .vegPropFruit = 0.0
      .reproPropRoot = 0.0
      .reproPropStem = 0.05
      .reproPropLeaf = 0.1
      .reproPropFruit = 0.85
      .tempSumReproductive = 900.0
      .tempMaxReproductive = 45.0
      .fruitFactor = ./fruitFactor[value]
      vg::FruitFactor fruitFactor { //amended // #220
        .minDensity = 3.9
        .maxValue = 1.044
      }
    }
    vg::CropYield yield { //amended // #222
      .produceMass = ../mass[fruit]
      .fractionDryWeight = 0.045
    }
  }
  vg::Budget budget { // #224
  }
  OutputR output { // #229
    Box p { // #225
      +outdoorsCo2 = outdoors[co2]
      +outdoorsT = outdoors[temperature]
      +soilT = outdoors[soilTemperature]
      +outdoorsRh = outdoors[rh]
      +outdoorsWindSpeed = outdoors[windSpeed]
      +outdoorsLight = outdoors[radiation]
      +indoorsCo2 = indoors/co2[value]
      +indoorsT = indoors/temperature[value]
      +indoorsRh = indoors/humidity[rh]
      +growthLightPower = actuators/growthLights[powerUsage] 
      +heatingPower = controlled/heating/energyFlux[value] 
      +coolingPower = controlled/cooling/energyFlux[value]
      +growthLightIntensity = actuators/growthLights[parIntensity]
      +totalLightIntensity = indoors/light[parTotal]
      +netPhotosynthesisRate = crop/Pn[value]
      +grossPhotosynthesisRate = crop/Pg[value]
      +darkRespirationRate = crop/Rd[value]
      +cropGrowthRate = crop/growth[netGrowthRate]
      +leafLightUseEfficiencyTop = crop/layers/top/photosynthesis/lightResponse[LUE]
      +leafLightUseEfficiencyMiddle = crop/layers/middle/photosynthesis/lightResponse[LUE]
      +leafLightUseEfficiencyBottom = crop/layers/bottom/photosynthesis/lightResponse[LUE]
      +leafTemperatureTop = crop/layers/top/temperature[value]
      +leafTemperatureMiddle = crop/layers/middle/temperature[value]
      +leafTemperatureBottom = crop/layers/bottom/temperature[value]
      +setpointVentilation = setpoints/temperature/ventilation[value]
      +setpointHeating = setpoints/temperature/heating[value]
      +co2Capacity = allSetpoints/co2Capacity[signal]
      +co2Setpoint = allSetpoints/co2Setpoint[signal]
      +co2Injection = controllers/co2[value]
      +co2InjectionMax = controllers/co2[maxValue]
      +growthLightOn = controllers/growthLight[value]
      +vapourFluxTranspiration = indoors/given/vapourFlux/transpiration[vapourFlux]
      +vapourFluxCondensationCover = indoors/given/vapourFlux/condensationCover[vapourFlux]
      +vapourFluxCondensationsScreens = indoors/given/vapourFlux/condensationScreens[vapourFlux]
      +vapourFluxLeakage = indoors/given/vapourFlux/airFluxOutdoors[vapourFlux]
      +vapourFluxVents = cooling/vapourFlux[vapourFlux]
      +screenEnergySetpoint = controllers/screens/energy[value]
      +screenShadeSetpoint = controllers/screens/shade[value]
      +screenBlackoutSetpoint = controllers/screens/blackout[value]
      +airFluxInfiltration = given/airFlux/infiltration[value]
      +airFluxVents = controlled/cooling/airFluxVents[value]
      +airFluxTotal = total/airFlux[value]
      +ventsOpening = actuators/vents[value]
    }
    PageR  { // #227
      .xAxis = (calendar[dateTime])
      PlotR  { // #226
        .ports = (output/p[*])
        .ncol = 4
      }
    }
    OutputText  { // #228
      .skipInitialRows = 360
      .averageN = 15
    }
  }
}
